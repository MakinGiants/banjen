apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.firebase.crashlytics'

apply from: '../jacoco.gradle'

def appId = "com.makingiants.android.banjotuner"
def appVersionName = "1.6.0"
def appVersionCode = 119

def customProperty(key) {
    if (project.hasProperty(key)) {
        return project.property(key)
    } else {
        return System.getenv(key)
    }
}

def adsUnitId() {
    return customProperty("BANJEN_ADS_UNIT_ID_BANNER")
}

def adsAppId() {
    return customProperty("BANJEN_ADMOB_APP_ID")
}

android {
    compileSdkVersion setup.targetSdk
    flavorDimensions "default"

    defaultConfig {
        applicationId appId
        minSdkVersion setup.minSdk
        targetSdkVersion setup.targetSdk
        versionCode appVersionCode
        versionName appVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Enable just English configs for dependencies, allowing to shrink apk size more
        resConfigs "en", "pt", "es", "it"

        resValue "string", "ads_unit_id_banner", "\"${adsUnitId()}\""
        resValue "string", "ads_app_id", "\"${adsAppId()}\""
    }

    buildTypes {
        debug {
            minifyEnabled true
            shrinkResources true
            useProguard true // For performance
            testCoverageEnabled = true

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'rules-test-e2e.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            useProguard true

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/services/org.xmlpull.v1.XmlPullParserFactory'
    }

    signingConfigs {
        release {
            if (project.hasProperty('BANJEN_SIGN_PATH')) {
                storeFile file(project.property("BANJEN_SIGN_PATH"))
                storePassword project.property("BANJEN_SIGN_PWD")
                keyAlias project.property("BANJEN_SIGN_ALIAS")
                keyPassword project.property("BANJEN_SIGN_PWD")
            }
        }
    }

    lintOptions {
        abortOnError false
    }


    // Build an instant app zip of our single APK. This saves having to create a feature module, an
    // instant app module, and a traditional application module just to get an aab and instant zip.
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (output.outputFile.name.endsWith('.apk')) {
                def zipInstant = tasks.create("zipInstant${variant.name.capitalize()}", Zip) {
                    from(output.outputFile)
                    archiveName = "instant-${output.name}.zip"
                    destinationDir = output.outputFile.parentFile
                }
                zipInstant.dependsOn(output.assemble)
                tasks.getByName('assemble').dependsOn(zipInstant)
            }
        }
    }

}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$deps.kotlin"

    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation "com.google.android.gms:play-services-ads-lite:19.1.0"
    implementation 'com.google.firebase:firebase-analytics:17.4.0'
    implementation 'com.google.firebase:firebase-crashlytics:17.0.0'

    testImplementation 'junit:junit:4.13'
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$deps.kotlin"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$deps.kotlin"

    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.2.0'
    androidTestImplementation "androidx.test.ext:junit:1.1.1"
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
}
